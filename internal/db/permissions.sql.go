// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permissions.sql

package db

import (
	"context"
)

const createPermission = `-- name: CreatePermission :exec
INSERT INTO permissions (id, name, code) VALUES ($1, $2, $3)
`

func (q *Queries) CreatePermission(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createPermission)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deletePermission)
	return err
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT id, name, code FROM permissions WHERE id = $1
`

func (q *Queries) GetPermissionByID(ctx context.Context) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByID)
	var i Permission
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const updatePermission = `-- name: UpdatePermission :exec
UPDATE permissions
SET
    name = COALESCE($2, name),
    code = COALESCE($3, code)
WHERE id = $1
  AND (COALESCE($2, name) != name
         OR COALESCE($3, code) != code)
`

func (q *Queries) UpdatePermission(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updatePermission)
	return err
}
