// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_groups.sql

package db

import (
	"context"
)

const createUserGroup = `-- name: CreateUserGroup :exec
INSERT INTO users_groups (user_id, group_id) VALUES ($1, $2)
`

func (q *Queries) CreateUserGroup(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createUserGroup)
	return err
}

const deleteUserGroup = `-- name: DeleteUserGroup :exec
DELETE FROM users_groups WHERE user_id = $1 AND group_id = $2
`

func (q *Queries) DeleteUserGroup(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUserGroup)
	return err
}

const getUserGroupsByUserID = `-- name: GetUserGroupsByUserID :many
SELECT id, user_id, group_id FROM users_groups WHERE user_id = $1
`

func (q *Queries) GetUserGroupsByUserID(ctx context.Context) ([]UsersGroup, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroupsByUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersGroup
	for rows.Next() {
		var i UsersGroup
		if err := rows.Scan(&i.ID, &i.UserID, &i.GroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserGroup = `-- name: UpdateUserGroup :exec
UPDATE users_groups
SET
    user_id = COALESCE($2, user_id),
    group_id = COALESCE($3, group_id)
WHERE id = $1
  AND (COALESCE($2, user_id) != user_id
         OR COALESCE($3, group_id) != group_id)
`

func (q *Queries) UpdateUserGroup(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateUserGroup)
	return err
}
