// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (first_name, last_name, username, email, password, avatar)
VALUES ($1, $2, $3, $4, $5, $6)
`

func (q *Queries) CreateUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createUser)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUser)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, username, email, password, avatar, created_at, updated_at, active, flag FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
		&i.Flag,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    username = COALESCE($4, username),
    email = COALESCE($5, email),
    password = COALESCE($6, password),
    avatar = COALESCE($7, avatar),
    active = COALESCE($8, active),
    flag = COALESCE($9, flag)
WHERE id = $1
  AND (COALESCE($2, first_name) != first_name
         OR COALESCE($3, last_name) != last_name
         OR COALESCE($4, username) != username
         OR COALESCE($5, email) != email
         OR COALESCE($6, password) != password
         OR COALESCE($7, avatar) != avatar
         OR COALESCE($8, active) != active
         OR COALESCE($9, flag) != flag)
`

func (q *Queries) UpdateUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateUser)
	return err
}
