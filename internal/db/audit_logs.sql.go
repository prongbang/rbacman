// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: audit_logs.sql

package db

import (
	"context"
	"time"
)

const createAuditLog = `-- name: CreateAuditLog :exec
INSERT INTO audit_logs (id, user_id, action, resource) VALUES (?, ?, ?, ?)
`

type CreateAuditLogParams struct {
	ID       string
	UserID   string
	Action   string
	Resource string
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error {
	_, err := q.db.ExecContext(ctx, createAuditLog,
		arg.ID,
		arg.UserID,
		arg.Action,
		arg.Resource,
	)
	return err
}

const getAllAuditLogs = `-- name: GetAllAuditLogs :many
SELECT id, user_id, action, resource, timestamp FROM audit_logs
`

func (q *Queries) GetAllAuditLogs(ctx context.Context) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAllAuditLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.Resource,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByUserID = `-- name: GetAuditLogsByUserID :many
SELECT id, user_id, action, resource, timestamp FROM audit_logs WHERE user_id = ?
`

func (q *Queries) GetAuditLogsByUserID(ctx context.Context, userID string) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.Resource,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuditLog = `-- name: UpdateAuditLog :exec
UPDATE audit_logs
SET
    user_id = COALESCE(?, user_id),
    action = COALESCE(?, action),
    resource = COALESCE(?, resource),
    timestamp = COALESCE(?, timestamp)
WHERE id = ?
  AND (COALESCE(?, user_id) != user_id
         OR COALESCE(?, action) != action
         OR COALESCE(?, resource) != resource
         OR COALESCE(?, timestamp) != timestamp)
`

type UpdateAuditLogParams struct {
	UserID      string
	Action      string
	Resource    string
	Timestamp   time.Time
	ID          string
	UserID_2    string
	Action_2    string
	Resource_2  string
	Timestamp_2 time.Time
}

func (q *Queries) UpdateAuditLog(ctx context.Context, arg UpdateAuditLogParams) error {
	_, err := q.db.ExecContext(ctx, updateAuditLog,
		arg.UserID,
		arg.Action,
		arg.Resource,
		arg.Timestamp,
		arg.ID,
		arg.UserID_2,
		arg.Action_2,
		arg.Resource_2,
		arg.Timestamp_2,
	)
	return err
}
