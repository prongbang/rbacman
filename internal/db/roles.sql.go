// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (id, name) VALUES ($1, $2)
`

func (q *Queries) CreateRole(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createRole)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteRole)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, level FROM roles WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Level)
	return i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET
    name = COALESCE($2, name),
    level = COALESCE($3, level)
WHERE id = $1
  AND (COALESCE($2, name) != name
         OR COALESCE($3, level) != level)
`

func (q *Queries) UpdateRole(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateRole)
	return err
}
