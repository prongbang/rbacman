// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: resources.sql

package db

import (
	"context"
)

const createResource = `-- name: CreateResource :exec
INSERT INTO resources (id, name, code) VALUES ($1, $2, $3)
`

func (q *Queries) CreateResource(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createResource)
	return err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resources WHERE id = $1
`

func (q *Queries) DeleteResource(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteResource)
	return err
}

const getResourceByID = `-- name: GetResourceByID :one
SELECT id, name, code FROM resources WHERE id = $1
`

func (q *Queries) GetResourceByID(ctx context.Context) (Resource, error) {
	row := q.db.QueryRowContext(ctx, getResourceByID)
	var i Resource
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const updateResource = `-- name: UpdateResource :exec
UPDATE resources
SET
    name = COALESCE($2, name),
    code = COALESCE($3, code)
WHERE id = $1
  AND (COALESCE($2, name) != name
         OR COALESCE($3, code) != code)
`

func (q *Queries) UpdateResource(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateResource)
	return err
}
