// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :exec
INSERT INTO ` + "`" + `groups` + "`" + ` (id, name) VALUES ($1, $2)
`

func (q *Queries) CreateGroup(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createGroup)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM ` + "`" + `groups` + "`" + ` WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteGroup)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, name FROM ` + "`" + `groups` + "`" + ` WHERE id = $1
`

func (q *Queries) GetGroupByID(ctx context.Context) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE ` + "`" + `groups` + "`" + `
SET
    name = COALESCE($2, name)
WHERE id = $1
  AND COALESCE($2, name) != name
`

func (q *Queries) UpdateGroup(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateGroup)
	return err
}
