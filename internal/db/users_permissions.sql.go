// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_permissions.sql

package db

import (
	"context"
)

const createUserPermission = `-- name: CreateUserPermission :exec
INSERT INTO users_permissions (user_id, resource_id, permission_id) VALUES ($1, $2, $3)
`

func (q *Queries) CreateUserPermission(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createUserPermission)
	return err
}

const deleteUserPermission = `-- name: DeleteUserPermission :exec
DELETE FROM users_permissions WHERE user_id = $1 AND resource_id = $2 AND permission_id = $3
`

func (q *Queries) DeleteUserPermission(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUserPermission)
	return err
}

const getUserPermissionsByUserID = `-- name: GetUserPermissionsByUserID :many
SELECT id, user_id, resource_id, permission_id FROM users_permissions WHERE user_id = $1
`

func (q *Queries) GetUserPermissionsByUserID(ctx context.Context) ([]UsersPermission, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissionsByUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPermission
	for rows.Next() {
		var i UsersPermission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PermissionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPermission = `-- name: UpdateUserPermission :exec
UPDATE users_permissions
SET
    user_id = COALESCE($2, user_id),
    resource_id = COALESCE($3, resource_id),
    permission_id = COALESCE($4, permission_id)
WHERE id = $1
  AND (COALESCE($2, user_id) != user_id
         OR COALESCE($3, resource_id) != resource_id
         OR COALESCE($4, permission_id) != permission_id)
`

func (q *Queries) UpdateUserPermission(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateUserPermission)
	return err
}
