// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_permissions.sql

package db

import (
	"context"
	"database/sql"
)

const checkPermissionsHighLevelByUserID = `-- name: CheckPermissionsHighLevelByUserID :one
SELECT COUNT(u.id) AS total
FROM users u
INNER JOIN users_roles ur ON ur.user_id = u.id
INNER JOIN roles r ON r.id = ur.role_id AND r.level = 1
WHERE u.id = ?
`

func (q *Queries) CheckPermissionsHighLevelByUserID(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPermissionsHighLevelByUserID, id)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const checkPermissionsUserLevelByUserID = `-- name: CheckPermissionsUserLevelByUserID :one
SELECT COUNT(p.id) AS total
FROM users u
INNER JOIN users_groups ug ON ug.user_id = u.id
INNER JOIN ` + "`" + `groups` + "`" + ` g ON g.id = ug.group_id
INNER JOIN groups_permissions gp ON gp.group_id = ug.group_id
INNER JOIN permissions p ON p.id = gp.permission_id
INNER JOIN resources r ON r.id = gp.resource_id
WHERE u.id = ? AND UPPER(CONCAT(r.code, '_', p.code)) = ?
`

type CheckPermissionsUserLevelByUserIDParams struct {
	ID   string
	Code sql.NullString
}

func (q *Queries) CheckPermissionsUserLevelByUserID(ctx context.Context, arg CheckPermissionsUserLevelByUserIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPermissionsUserLevelByUserID, arg.ID, arg.Code)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createUserPermission = `-- name: CreateUserPermission :exec
INSERT INTO users_permissions (user_id, resource_id, permission_id) VALUES (?, ?, ?)
`

type CreateUserPermissionParams struct {
	UserID       string
	ResourceID   int32
	PermissionID int32
}

func (q *Queries) CreateUserPermission(ctx context.Context, arg CreateUserPermissionParams) error {
	_, err := q.db.ExecContext(ctx, createUserPermission, arg.UserID, arg.ResourceID, arg.PermissionID)
	return err
}

const deleteUserPermission = `-- name: DeleteUserPermission :exec
DELETE FROM users_permissions WHERE user_id = ? AND resource_id = ? AND permission_id = ?
`

type DeleteUserPermissionParams struct {
	UserID       string
	ResourceID   int32
	PermissionID int32
}

func (q *Queries) DeleteUserPermission(ctx context.Context, arg DeleteUserPermissionParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserPermission, arg.UserID, arg.ResourceID, arg.PermissionID)
	return err
}

const getUserPermissionsByUserID = `-- name: GetUserPermissionsByUserID :many
SELECT id, user_id, resource_id, permission_id FROM users_permissions WHERE user_id = ?
`

func (q *Queries) GetUserPermissionsByUserID(ctx context.Context, userID string) ([]UsersPermission, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPermission
	for rows.Next() {
		var i UsersPermission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PermissionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPermission = `-- name: UpdateUserPermission :exec
UPDATE users_permissions
SET
    user_id = COALESCE(?, user_id),
    resource_id = COALESCE(?, resource_id),
    permission_id = COALESCE(?, permission_id)
WHERE id = ?
  AND (COALESCE(?, user_id) != user_id
         OR COALESCE(?, resource_id) != resource_id
         OR COALESCE(?, permission_id) != permission_id)
`

type UpdateUserPermissionParams struct {
	UserID         string
	ResourceID     int32
	PermissionID   int32
	ID             int32
	UserID_2       string
	ResourceID_2   int32
	PermissionID_2 int32
}

func (q *Queries) UpdateUserPermission(ctx context.Context, arg UpdateUserPermissionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPermission,
		arg.UserID,
		arg.ResourceID,
		arg.PermissionID,
		arg.ID,
		arg.UserID_2,
		arg.ResourceID_2,
		arg.PermissionID_2,
	)
	return err
}
