// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations.sql

package db

import (
	"context"
	"database/sql"
)

const createOrganization = `-- name: CreateOrganization :exec
INSERT INTO organizations (id, name, parent_id) VALUES (?, ?, ?)
`

type CreateOrganizationParams struct {
	ID       int32
	Name     sql.NullString
	ParentID sql.NullInt32
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, createOrganization, arg.ID, arg.Name, arg.ParentID)
	return err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations WHERE id = ?
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, name, parent_id FROM organizations WHERE id = ?
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id int32) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(&i.ID, &i.Name, &i.ParentID)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :exec
UPDATE organizations
SET
    name = COALESCE(?, name),
    parent_id = COALESCE(?, parent_id)
WHERE id = ?
  AND (COALESCE(?, name) != name
         OR COALESCE(?, parent_id) != parent_id)
`

type UpdateOrganizationParams struct {
	Name       sql.NullString
	ParentID   sql.NullInt32
	ID         int32
	Name_2     sql.NullString
	ParentID_2 sql.NullInt32
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, updateOrganization,
		arg.Name,
		arg.ParentID,
		arg.ID,
		arg.Name_2,
		arg.ParentID_2,
	)
	return err
}
