// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: resources.sql

package db

import (
	"context"
	"database/sql"
)

const createResource = `-- name: CreateResource :exec
INSERT INTO resources (id, name, code) VALUES (?, ?, ?)
`

type CreateResourceParams struct {
	ID   int32
	Name sql.NullString
	Code sql.NullString
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) error {
	_, err := q.db.ExecContext(ctx, createResource, arg.ID, arg.Name, arg.Code)
	return err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resources WHERE id = ?
`

func (q *Queries) DeleteResource(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteResource, id)
	return err
}

const getResourceByID = `-- name: GetResourceByID :one
SELECT id, name, code FROM resources WHERE id = ?
`

func (q *Queries) GetResourceByID(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRowContext(ctx, getResourceByID, id)
	var i Resource
	err := row.Scan(&i.ID, &i.Name, &i.Code)
	return i, err
}

const updateResource = `-- name: UpdateResource :exec
UPDATE resources
SET
    name = COALESCE(?, name),
    code = COALESCE(?, code)
WHERE id = ?
  AND (COALESCE(?, name) != name
         OR COALESCE(?, code) != code)
`

type UpdateResourceParams struct {
	Name   sql.NullString
	Code   sql.NullString
	ID     int32
	Name_2 sql.NullString
	Code_2 sql.NullString
}

func (q *Queries) UpdateResource(ctx context.Context, arg UpdateResourceParams) error {
	_, err := q.db.ExecContext(ctx, updateResource,
		arg.Name,
		arg.Code,
		arg.ID,
		arg.Name_2,
		arg.Code_2,
	)
	return err
}
